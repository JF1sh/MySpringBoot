Spring -AOP
 
  概念：面向切面编程，通过预编译（AspectJ）和运行期动态代理(JDK动态代理，CGLIB动态代理)实现程序功能的统一维护
                                             
											 --JDK动态代理: 代理有实现接口的类 (核心：InvocationHandler接口和Proxy类)
											 --CGLIB动态代理: 代理没有实现接口的类 （该对象没有实现任何的接口）
  
  功能: 日志记录，性能统计，事务管理，安全控制，异常处理



相关概念：
      
       1，切面（Aspect）：一个关注点（事务），这个关注点可能会横切多个对象（产品管理、订单管理）。

       2，接点（Joinpoint）：程序执行过程中的某个特定的点。（一个类中执行的某个方法的开始）。
 
       3，通知（Advice）：在切面的某个特定的连接点上执行的动作（方法执行的时候，切面额外执行的动作，比如说方法执行时，开启事物提交功能）。

       4，切入点（Pointcut）：匹配连接点的断言，在AOP中通知和一个切入点表达式关联（在切面中匹配一个具体的连接点（某个功能的方法的开始））。
       5，引入（Introduction）：在不修改类代码的前提下，修改的是字节码文件，为类添加新的方法和属性。（类似于编译期动态的修改class文件去增加新的属性和方法，源代码中并没有这样的属性和方法），取决于使用AspectJ和SpringAOP的实现方式，使用方式不同，为类添加属性和方法的方式是有区别的。	   
	   6、目标对象（TargetObject）：被一个或者多个切面所通知的对象。（例如存在一个订单的service（对象）和一个商品的service（对象），执行该模块的功能时，切面会通知相对应的service，在执行数据库操作时，去加上事物的控制，这两个service就是目标对象）。
	   7、AOP代理(AOP-Proxy):AOP框架创建的对象，用来实现切面契约(aspect,contract),包括通知方法执行等功能（这里执行的方法指的是切面里的执行相应操作所用到的方法）开发时不知道这个对象存在的，也不清楚会创建成什么样子。
	   8,织入（Weaving）：把切面连接到其他的应用程序类型或者对象上，并创建一个被通知的对象，分为：编译时织入、类加载时织入、执行时织入。（使切面和对象（模块功能）牵连起来.
	   
	   
	   
	   	<bean id="moocAspect" class="com.imooc.aop.schema.advice.MoocAspect"></bean>
	    <bean id="aspectBiz" class="com.imooc.aop.schema.advice.biz.AspectBiz"></bean>
	
	    <aop:config>
		 <aop:aspect id="moocAspectAOP" ref="moocAspect">  --定义切面类为 moocAspect
 			<aop:pointcut expression="execution(* com.imooc.aop.schema.advice.biz.*Biz.*(..))" id="moocPiontcut"/>  --定义切入点(在执行该类下的方法时)
 			<aop:before method="before" pointcut-ref="moocPiontcut"/>  --在上述方法执行前，先执行切面类的方法before()
 			<aop:after-returning method="afterReturning" pointcut-ref="moocPiontcut"/>
 			<aop:after-throwing method="afterThrowing" pointcut-ref="moocPiontcut"/> 
 			<aop:after method="after" pointcut-ref="moocPiontcut"/> 
 			<aop:around method="around" pointcut-ref="moocPiontcut"/>
			
 			<aop:around method="aroundInit" pointcut="execution(* com.imooc.aop.schema.advice.biz.AspectBiz.init(String, int))and args(bizName, times)"/> 
			-- 在执行AsocetBiz类中的init()方法时，执行切面类中的aroundInit(),必须传入 String bizName , int times
			-- 必须加入参数ProceedingJoinPoint pjp
			
			 	public Object around(ProceedingJoinPoint pjp,String bizName , int times){
				 		Object obj = pjp.proceed();
						return obj;
				 }
			 
 			</aop:aspect>				
 		</aop:config>

	   
--Advice（通知）的类型（在切面某个特定连接点执行的动作 切面类中的方法）
    
前置通知（Before-advice）：在某连接点（join-point）（某个功能方法开始执行前）之前执行的通知，但不能阻止连接点前的执行（除该方法外的其他方法的执行）（除非它抛出一个异常）。

返回后通知（After returning advice）：在某连接点（方法）正常完成后执行的通知（将要执行的切面功能）。

抛出异常后通知（After throwing advice）：在方法抛出异常退出时执行的通知（将要执行切面的功能）。

后通知（After（finally）advice）：当某连接点（方法）退出的时候执行的通知（切面将要执行的功能）（不论是正常返回还是异常退出都会执行的通知）。

环绕通知（Around Advice）：包围一个连接点（join point）的通知（在整个方法的内部都有切面要执行的功能存在，不分前后）。




--Spring框架中AOP的用途：

用途1：提供了声明式的企业服务（也可以是其他服务，例如互联网服务），特别是EJB（重量级框架）的替代服务的声明。

用途2：允许用户定制自己的方面（切面），以完成OOP（面向对象编程，模拟世界中行为和方式，可以理解为实现一个功能的顺序）与AOP（横切的方式，可以理解为各个功能之间横切的一种功能）的互补使用，可以实现自己横切的功能。




--Spring中的AOP（Spring中AOP的实现方式以及特点）

特点1：纯java实现，无需特殊的编译过程（普通代码需要加载才能执行），不需要控制类加载器层次。可以更好的进行控制（使用类加载器应当谨慎，容易方法生ClassNotFound异常这种情况）。

特点2：目前只支持方法执行连接点（通知Spring Bean的方法执行），（在执行某方法时，才去执行切面的功能）。

特点3：SpringAOP不是为了提供最完整的AOP实现（尽管它非常强大）；而是侧重于提供一种AOP实现和Spring IoC容器之间的整合，用于帮助解决企业应用中的常见问题。




































































































