什么是线程安全？
    无论业务中遇到怎么的多个线程访问某个对象或者某个方法的情况，我们在编写业务逻辑时，
    都不需要做额外的处理(也就是可以像单线程一个编程),程序也可以正常运行，不会因为多线程而出错，称为线程安全。



什么是发布：
  让类对象可以超过本类范围的其他类使用。
  比如：1，使用public定义类；
       2，方法的return 为一个对象
       3，方法的参数为一个对象

什么是逸出：
  被发布到了不该发布的地方。
  1，方法返回了一个private对象(private本意是不让外部访问)
  2，还未完成初始化(构造函数没有执行完毕)就把对象提供给外界，
     2.1 在构造函数中未初始化就this赋值
     2.2 注册监听器事件
     2.3 构造函数中运行线程



哪些情况下要注意线程安全问题：

   1：访问共享变量/资源的时候，会有并发风险，比如对象的属性，静态变量，共享缓存，数据库等

   2：所有依赖时序性的操作，即使每一步操作都是线程安全的，还是存在并发问题
      read-modify-write  check-then-act

   3:不同数据之间存在绑定关系 （ip/port） 修改一个就必须修改另外一个

   4: 我们在使用其他类的时候，如果对方没有声明自己是线程安全的





多线程会导致的问题：
   1：性能问题有哪些体现，什么是性能问题
      服务器响应慢，吞吐量低，资源消耗过高

     导致性能问题的原因：
        --1)调度：上下文切换
               -什么是上下文切换？
                  1-1): 上下文：只的是当线程挂起时，记录线程的运行状态和运行到哪一步(保持现场),再次调用时会继续运行
                        上下文切换：当一个线程进入sleep() 方法时，调度器会让线程阻塞，然后让另外一个等待CPU分配资源
                                    的线程进入Runnable状态
                        上下文切换步骤：1）挂起当前线程
                                      2）将线程状态存储在内存中（线程目前执行到哪一个指令，指令位置在哪儿，后续需要切换回来，
                                         跳转到阻塞之前的状态）（状态就是上下文）

               -缓存开销
                  2-1) 缓存失效： 一旦进行了上下文切换， cpu将执行不同线程的不同代码，导致原来的缓存失效。CPU将进行重新缓存


               -何时会导致密集的上下文切换
                  3-1):  枪锁  io读写  其他原因导致的线程阻塞

         --2)协助：内存同步
             JMM 规定是有主内存和各个CUP有自己的缓存，这种情况会加快处理速度
             在使用多线程的情况下，使用Synchronized和volatile使缓存失效，直接使用主内存(内存同步)
